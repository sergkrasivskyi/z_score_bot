import logging
from apscheduler.schedulers.blocking import BlockingScheduler
from datetime import datetime
import asyncio
from asyncio import Semaphore
from bot.data_processing.data_updater import update_all_assets

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = "zscore_bot.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    encoding="utf-8",  # –î–æ–¥–∞—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è UTF-8
)

def scheduled_task():
    """
    –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ.
    """
    print(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.")
    logging.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.")
    try:
        sem = Semaphore(10)  # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π Semaphore –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
        asyncio.run(update_all_assets(sem))
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        logging.info("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

def setup_scheduler():
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.
    """
    scheduler = BlockingScheduler()
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ –Ω–∞ 0, 15, 30, 45 —Ö–≤–∏–ª–∏–Ω–∞—Ö –∫–æ–∂–Ω–æ—ó –≥–æ–¥–∏–Ω–∏
    scheduler.add_job(scheduled_task, 'cron', minute='0,15,30,45')

    logging.info("üìÖ –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
    print("üìÖ –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
    try:
        scheduler.start()
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚èπ –†–æ–∑–∫–ª–∞–¥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        print("‚èπ –†–æ–∑–∫–ª–∞–¥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
