import logging
import aiohttp
import asyncio
import time  # –î–æ–¥–∞–π—Ç–µ –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
from bot.database.db_manager import DatabaseManager
from bot.data_storage.json_manager import JSONManager
from bot.config.config import BINANCE_API_KEY  # –Ü–º–ø–æ—Ä—Ç API –∫–ª—é—á–∞
from datetime import datetime, timezone
from asyncio import Semaphore

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = "zscore_bot.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    encoding="utf-8",
)

BASE_URL = "https://api.binance.com"

SEM_LIMIT = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
semaphore = Semaphore(SEM_LIMIT)

async def fetch_prices(session, symbol, start_time=None):
    async with semaphore:  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–µ–º–∞—Ñ–æ—Ä–∞ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
        url = f"{BASE_URL}/api/v3/klines"
        headers = {
            "X-MBX-APIKEY": BINANCE_API_KEY
        }
        params = {
            "symbol": symbol,
            "interval": "15m",
            "limit": 672
        }
        if start_time:
            params["startTime"] = int(start_time.timestamp() * 1000)

        try:
            async with session.get(url, headers=headers, params=params) as response:
                response.raise_for_status()
                data = await response.json()
                logging.info(f"‚úÖ –î–∞–Ω—ñ –¥–ª—è {symbol} –æ—Ç—Ä–∏–º–∞–Ω—ñ. –ü–µ—Ä—ñ–æ–¥–∏: {len(data)}.")
                return [
                    {"timestamp": int(candle[0] / 1000), "price": float(candle[4])}
                    for candle in data
                ]
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
            return []

async def update_asset(session, db_manager, asset, semaphore):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∞–∫—Ç–∏–≤—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
    """
    async with semaphore:  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Semaphore –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        start_time = time.time()
        symbol = f"{asset}USDT"

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É
        latest_record = db_manager.fetch_latest_price(symbol)
        start_time_latest = None if not latest_record else datetime.fromisoformat(latest_record[2])
        if start_time_latest:
            logging.info(f"‚úÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –¥–ª—è {symbol}: {start_time_latest}.")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        historical_prices = await fetch_prices(session, symbol, start_time_latest)
        if not historical_prices:
            return

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–æ–≤–∏—Ö —ñ –Ω–∞—è–≤–Ω–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
        existing_timestamps = set(
            datetime.fromisoformat(record[2]).timestamp() for record in db_manager.fetch_all_crypto_prices(symbol)
        )
        new_data = [
            data for data in historical_prices
            if data["timestamp"] not in existing_timestamps
        ]
        logging.info(f"üî¢ –ù–æ–≤–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤ –¥–ª—è {symbol}: {len(new_data)}.")

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
        if len(existing_timestamps) + len(new_data) > 672:
            db_manager.delete_oldest_crypto_prices(symbol, len(existing_timestamps) + len(new_data) - 672)
            logging.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤ –¥–ª—è {symbol}: {len(existing_timestamps) + len(new_data) - 672}.")

        # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        db_manager.insert_bulk_crypto_prices(symbol, new_data)

        logging.info(f"‚úÖ –î–∞–Ω—ñ –¥–ª—è {symbol} –æ–Ω–æ–≤–ª–µ–Ω–æ. –£—Å—å–æ–≥–æ –Ω–æ–≤–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤: {len(new_data)}. –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥.")

async def update_all_assets(semaphore):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤—ñ–≤ —ñ–∑ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é.
    """
    json_manager = JSONManager()
    db_manager = DatabaseManager()

    monitored_pairs = json_manager.get_monitored_pairs()
    pairs = [pair["pair"] for pair in monitored_pairs]
    logging.info(f"üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {len(pairs)}.")

    unique_assets = set()
    for pair in pairs:
        base, quote = pair.split("/")
        unique_assets.update([base, quote])
    logging.info(f"üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤: {len(unique_assets)}.")

    # –ü–æ—á–∞—Ç–æ–∫ –∑–∞–º—ñ—Ä—É —á–∞—Å—É
    start_time = time.time()
    logging.info("‚è≥ –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤—ñ–≤...")

    async with aiohttp.ClientSession() as session:
        tasks = [update_asset(session, db_manager, asset, semaphore) for asset in unique_assets]
        await asyncio.gather(*tasks)

    # –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∑–∞–º—ñ—Ä—É —á–∞—Å—É
    end_time = time.time()
    total_time = end_time - start_time
    logging.info(f"‚úÖ –£—Å—ñ –∞–∫—Ç–∏–≤–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {total_time:.2f} —Å–µ–∫—É–Ω–¥.")

    db_manager.close()
