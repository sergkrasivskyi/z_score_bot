import sqlite3
import numpy as np
import logging
import sys
sys.path.append("D:/CryptoBots/Crypto_Way/Trade_bots/zscore_bot_py")
from bot.config.config import DATABASE_PATH as DB_PATH

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = "zscore_calculator.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    encoding="utf-8",
)

def fetch_synchronized_data(cursor, base_asset, quote_asset):
    """
    –û—Ç—Ä–∏–º—É—î —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ timestamp –¥–∞–Ω—ñ –¥–ª—è –¥–≤–æ—Ö –∞–∫—Ç–∏–≤—ñ–≤.

    Parameters:
        cursor: SQLite –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤.
        base_asset (str): –ù–∞–∑–≤–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤—É.
        quote_asset (str): –ù–∞–∑–≤–∞ –∫–≤–æ—Ç–æ–≤–∞–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É.

    Returns:
        tuple: –î–≤–∞ —Å–ø–∏—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ü—ñ–Ω –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —ñ –∫–≤–æ—Ç–æ–≤–∞–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—ñ–≤.
    """
    query = """
        SELECT b.price, q.price
        FROM cryptocurrencies b
        JOIN cryptocurrencies q
        ON b.timestamp = q.timestamp
        WHERE b.name = ? AND q.name = ?
        ORDER BY b.timestamp DESC
        LIMIT 672
    """
    cursor.execute(query, (base_asset, quote_asset))
    data = cursor.fetchall()

    base_data = [row[0] for row in data]
    quote_data = [row[1] for row in data]

    return base_data, quote_data

def calculate_zscore_for_pair(pair):
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î Z-Score –¥–ª—è –ø–∞—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.

    Parameters:
        pair (str): –ü–∞—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ 'BASE/QUOTE'.

    Returns:
        float: Z-Score –¥–ª—è –ø–∞—Ä–∏ –∞–±–æ NaN, —è–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.
    """
    base_asset, quote_asset = pair.split("/")

    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        logging.info(f"üìä –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É Z-Score –¥–ª—è –ø–∞—Ä–∏ {pair}")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∞–∫—Ç–∏–≤—ñ–≤
        base_data, quote_data = fetch_synchronized_data(cursor, base_asset, quote_asset)

        conn.close()

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
        logging.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {base_asset}: {len(base_data)}")
        logging.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {quote_asset}: {len(quote_data)}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
        if len(base_data) < 672 or len(quote_data) < 672:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞—Ä–∏ {pair}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ü—ñ–Ω–∏
        if any(p == 0 or np.isnan(p) for p in base_data):
            logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è {base_asset}: {base_data}")
            raise ValueError(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è {base_asset}")
        if any(p == 0 or np.isnan(p) for p in quote_data):
            logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è {quote_asset}: {quote_data}")
            raise ValueError(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è {quote_asset}")

        # –°–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π –∫—É—Ä—Å
        synthetic_prices = [b / q for b, q in zip(base_data, quote_data)]

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        mean = np.mean(synthetic_prices)
        std_dev = np.std(synthetic_prices, ddof=0)  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ü—ñ–π–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        if std_dev == 0:
            raise ValueError(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥–æ—Ä—ñ–≤–Ω—é—î 0 –¥–ª—è {pair}")

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Z-Score
        last_price = synthetic_prices[-1]
        zscore = (last_price - mean) / std_dev

        logging.info(f"‚úÖ Z-Score –¥–ª—è {pair}: {zscore:.2f}")
        return round(zscore, 2)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –ø–∞—Ä–∏ {pair}: {e}")
        return float("nan")

def calculate_zscores_for_pairs(pairs):
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î Z-Score –¥–ª—è —Å–ø–∏—Å–∫—É –ø–∞—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.

    Parameters:
        pairs (list): –°–ø–∏—Å–æ–∫ –ø–∞—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ 'BASE/QUOTE'.

    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ —ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Z-Score –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏.
    """
    results = {}
    for pair in pairs:
        try:
            zscore = calculate_zscore_for_pair(pair)
            if not np.isnan(zscore):
                results[pair] = zscore
                logging.info(f"‚úÖ Z-Score –¥–ª—è {pair}: {zscore}")
            else:
                results[pair] = None
                logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ Z-Score –¥–ª—è {pair}")
        except Exception as e:
            results[pair] = None
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –ø–∞—Ä–∏ {pair}: {e}")

    # –£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    success_count = sum(1 for z in results.values() if z is not None)
    logging.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—á–∏—Å–ª–µ–Ω–æ Z-Score –¥–ª—è {success_count} —ñ–∑ {len(pairs)} –ø–∞—Ä.")

    return results

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤–∏–π –Ω–∞–±—ñ—Ä –ø–∞—Ä
    test_pairs = [
        "PIXEL/YGG", "CYBER/LINA", "XAI/LINA", "XAI/YGG", "XAI/BAKE",
        "CYBER/AMB", "PORTAL/YGG", "CYBER/BAKE", "AAVE/ENS", "OGN/LINA",
        "MANA/SLP", "MANA/ROSE", "NEAR/BAND", "FLOW/VANRY", "FLOW/CHZ",
        "FLOW/DODO", "MANTA/GMT", "NEAR/PERP"
    ]

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è Z-Score –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏
    zscore_results = calculate_zscores_for_pairs(test_pairs)

    # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    for pair, zscore in zscore_results.items():
        if zscore is not None:
            print(f"Z-Score –¥–ª—è {pair}: {zscore:.2f}")
        else:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ Z-Score –¥–ª—è {pair}")
