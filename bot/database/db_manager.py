import logging
import sqlite3
from datetime import datetime, timezone
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_FILE = "zscore_bot.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    encoding="utf-8",
)

DATABASE_PATH = Path("z_score_bot.db")

class DatabaseManager:
    def __init__(self, db_path=DATABASE_PATH):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        self.connection = sqlite3.connect(db_path)
        self.cursor = self.connection.cursor()
        self._initialize_tables()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")

    def _initialize_tables(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å."""
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS cryptocurrencies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            price REAL NOT NULL,
            UNIQUE(name, timestamp)
        )
        """)
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS pairs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pair TEXT NOT NULL,
            zscore REAL,
            cross_rate REAL,
            max_zscore REAL,
            max_cross_rate REAL,
            dynamic_log TEXT,
            entry_cross_rate REAL,
            UNIQUE(pair)
        )
        """)
        self.connection.commit()
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")

    def insert_or_update_crypto(self, name, timestamp, price):
        """
        –í—Å—Ç–∞–≤–∫–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.
        """
        try:
            self.cursor.execute("""
            INSERT INTO cryptocurrencies (name, timestamp, price)
            VALUES (?, ?, ?)
            ON CONFLICT(name, timestamp) DO UPDATE SET
                price = excluded.price
            """, (name, timestamp, price))
            self.connection.commit()
          #  logging.info(f"‚úÖ –î–∞–Ω—ñ –¥–ª—è {name} –æ–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}, {price}.")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –¥–ª—è {name}: {e}.")

    def fetch_all_cryptos(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
        try:
            self.cursor.execute("SELECT * FROM cryptocurrencies")
            result = self.cursor.fetchall()
            logging.info(f"‚úÖ –£—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(result)}.")
            return result
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤: {e}.")
            return []

    def fetch_latest_price(self, name):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É –ø—Ä–æ —Ü—ñ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É.
        """
        try:
            self.cursor.execute("""
            SELECT * FROM cryptocurrencies
            WHERE name = ?
            ORDER BY timestamp DESC
            LIMIT 1
            """, (name,))
            result = self.cursor.fetchone()
            logging.info(f"‚úÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –¥–ª—è {name} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ.")
            return result
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è {name}: {e}.")
            return None

    def is_data_fresh(self, name, latest_timestamp):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –¥–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏.
        """
        try:
            self.cursor.execute("""
            SELECT 1 FROM cryptocurrencies
            WHERE name = ? AND timestamp = ?
            """, (name, latest_timestamp))
            result = self.cursor.fetchone() is not None
            logging.info(f"‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –¥–ª—è {name}: {result}.")
            return result
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –¥–ª—è {name}: {e}.")
            return False

    def insert_or_update_pair(self, pair, zscore, cross_rate):
        """
        –í—Å—Ç–∞–≤–∫–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó –ø–∞—Ä–∏.
        """
        try:
            self.cursor.execute("""
            INSERT INTO pairs (pair, zscore, cross_rate, max_zscore, max_cross_rate, dynamic_log, entry_cross_rate)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(pair) DO UPDATE SET
                zscore = excluded.zscore,
                cross_rate = excluded.cross_rate,
                max_zscore = MAX(pairs.max_zscore, excluded.zscore),
                max_cross_rate = MAX(pairs.max_cross_rate, excluded.cross_rate)
            """, (pair, zscore, cross_rate, zscore, cross_rate, None, cross_rate))
            self.connection.commit()
            logging.info(f"‚úÖ –î–∞–Ω—ñ –¥–ª—è –ø–∞—Ä–∏ {pair} –æ–Ω–æ–≤–ª–µ–Ω–æ: Z-Score {zscore}, Cross-Rate {cross_rate}.")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞—Ä–∏ {pair}: {e}.")

    def fetch_all_pairs(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ pairs.
        """
        try:
            self.cursor.execute("SELECT * FROM pairs")
            result = self.cursor.fetchall()
            logging.info(f"‚úÖ –£—Å—ñ –ø–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä: {len(result)}.")
            return result
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∞—Ä: {e}.")
            return []

    def fetch_unique_assets(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤ —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ –ø–∞—Ä.
        """
        try:
            self.cursor.execute("""
            SELECT DISTINCT pair FROM pairs
            """)
            pairs = self.cursor.fetchall()
            unique_assets = set()
            for pair in pairs:
                base, quote = pair[0].split("/")
                unique_assets.update([base, quote])
            logging.info(f"‚úÖ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∞–∫—Ç–∏–≤–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤—ñ–≤: {len(unique_assets)}.")
            return unique_assets
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤: {e}.")
            return set()

    def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö."""
        try:
            self.connection.close()
            logging.info("‚èπ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–æ.")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: {e}.")
    def fetch_all_crypto_prices(self, name):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É –∑ —Ç–∞–±–ª–∏—Ü—ñ cryptocurrencies.
        """
        try:
            self.cursor.execute("""
            SELECT * FROM cryptocurrencies
            WHERE name = ?
            ORDER BY timestamp ASC
            """, (name,))
            result = self.cursor.fetchall()
            logging.info(f"‚úÖ –£—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è {name} —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {len(result)}.")
            return result
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {name}: {e}.")
            return []
    def delete_oldest_crypto_prices(self, name, excess_count):
        """
        –í–∏–¥–∞–ª—è—î –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–∫—Ç–∏–≤—É, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 672.
        :param name: –ù–∞–∑–≤–∞ –∞–∫—Ç–∏–≤—É.
        :param excess_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏.
        """
        try:
            self.cursor.execute("""
            DELETE FROM cryptocurrencies
            WHERE id IN (
                SELECT id FROM cryptocurrencies
                WHERE name = ?
                ORDER BY timestamp ASC
                LIMIT ?
            )
            """, (name, excess_count))
            self.connection.commit()
            logging.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {excess_count} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {name}.")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {name}: {e}.")
    def insert_bulk_crypto_prices(self, name, prices):
        """
        –ü–∞–∫–µ—Ç–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∞–∫—Ç–∏–≤—É.
        :param name: –ù–∞–∑–≤–∞ –∞–∫—Ç–∏–≤—É.
        :param prices: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (timestamp, price).
        """
        try:
            self.cursor.executemany("""
            INSERT INTO cryptocurrencies (name, timestamp, price)
            VALUES (?, ?, ?)
            ON CONFLICT(name, timestamp) DO UPDATE SET
                price = excluded.price
            """, [(name, datetime.fromtimestamp(p["timestamp"], tz=timezone.utc).isoformat(), p["price"]) for p in prices])
            self.connection.commit()
            logging.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ –¥–ª—è {name}. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(prices)}.")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–∞–∫–µ—Ç–Ω–æ—ó –≤—Å—Ç–∞–≤–∫–∏ –¥–ª—è {name}: {e}.")


# –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if __name__ == "__main__":
    db_manager = DatabaseManager()
    pairs = db_manager.fetch_all_pairs()
    logging.info(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏: {len(pairs)}.")
    unique_assets = db_manager.fetch_unique_assets()
    logging.info(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤: {len(unique_assets)}.")
    db_manager.insert_or_update_crypto("BTC", "2025-01-12T12:00:00", 43000.0)
    print(db_manager.fetch_all_cryptos())
    print(db_manager.fetch_latest_price("BTC"))
    db_manager.close()
